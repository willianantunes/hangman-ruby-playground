# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/players', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Player. As you add validations to Player, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for :player
  end

  let(:invalid_attributes) do
    player_as_hash = attributes_for(:player)
    player_as_hash['email'] = 'Agrabah'
    player_as_hash
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PlayersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Player.create! valid_attributes
      get api_v1_players_url, headers: valid_headers, as: :json

      body_as_json = JSON.parse(response.body)
      expect(body_as_json.size).to eq(1)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      player = Player.create! valid_attributes
      get api_v1_player_url(player), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Player' do
        expect do
          post api_v1_players_url,
               params: { player: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Player, :count).by(1)
      end

      it 'renders a JSON response with the new player' do
        post api_v1_players_url,
             params: { player: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json; charset=utf-8'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Player' do
        expect do
          post api_v1_players_url,
               params: { player: invalid_attributes }, as: :json
        end.to change(Player, :count).by(0)
      end

      it 'renders a JSON response with errors for the new player' do
        post api_v1_players_url,
             params: { player: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { 'email' => 'jafar@agrabah.com' }
      end

      it 'updates the requested player' do
        player = Player.create! valid_attributes
        patch api_v1_player_url(player),
              params: { player: new_attributes }, headers: valid_headers, as: :json
        player.reload
        expect(player.email).to be_eql(new_attributes['email'])
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the player' do
        player = Player.create! valid_attributes
        patch api_v1_player_url(player),
              params: { player: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested player' do
      player = Player.create! valid_attributes
      expect do
        delete api_v1_player_url(player), headers: valid_headers, as: :json
      end.to change(Player, :count).by(-1)
    end
  end
end
